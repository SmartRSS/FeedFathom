name: Deploy Docs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Pull the code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup environment
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      # 3. Update extension manifest for autoupdate
      - name: Set update URL in extension manifest
        run: |
          # Determine the GitHub Pages URL
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "PAGES_URL=$PAGES_URL" >> $GITHUB_ENV

          # Replace the template placeholder with the actual URL
          sed -i "s|%UPDATE_URL%|$PAGES_URL/assets/updates.json|g" src/extension/manifest.json

      # 4. Generate packages
      - name: Build extension
        run: bun build-extension

      # 5. Calculate hashes and check if update is needed
      - name: Calculate and compare hashes
        run: |
          # Ensure assets directories exist
          mkdir -p docs/assets
          mkdir -p docs/assets/extension

          # Calculate hash of the new build
          NEW_HASH=$(sha256sum ext/FeedFathom_ff.zip | cut -d' ' -f1)
          echo "NEW_HASH=$NEW_HASH" >> $GITHUB_ENV

          # Try to get the current manifest data from the server
          CURRENT_DATA=$(bun -e "
            const url = \`\${process.env.PAGES_URL}/assets/updates.json\`;

            try {
              const response = await fetch(url);
              if (!response.ok) throw new Error('Failed to fetch');

              const data = await response.json();
              const update = data.addons['feedfathom@smartrss'].updates[0];
              const hash = update.update_hash || 'none';

              // Output version and hash on separate lines for easy parsing
              console.log(update.version);
              console.log(hash);
            } catch (e) {
              // If file doesn't exist or other error, output defaults
              console.log('none');
              console.log('none');
            }
          ")

          # Parse the output (version is first line, hash is second)
          CURRENT_VERSION=$(echo "$CURRENT_DATA" | head -n1)
          CURRENT_HASH=$(echo "$CURRENT_DATA" | tail -n1)

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV

          # Compare hashes and set environment variable
          if [ "sha256:$NEW_HASH" = "$CURRENT_HASH" ]; then
            echo "HASHES_MATCH=true" >> $GITHUB_ENV
            # Use the current version when hashes match
            echo "FF_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

            # Extract build date from current version
            VERSION_PARTS=(${CURRENT_VERSION//./ })
            YEAR_MONTH=${VERSION_PARTS[1]}
            DAY_TIME=${VERSION_PARTS[2]}

            YEAR=${YEAR_MONTH:0:4}
            MONTH=${YEAR_MONTH:4:2}
            DAY=${DAY_TIME:0:2}
            HOUR=${DAY_TIME:2:2}
            MINUTE=${DAY_TIME:4:2}

            BUILD_DATE="$YEAR-$MONTH-$DAY $HOUR:$MINUTE UTC"
            echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          else
            echo "HASHES_MATCH=false" >> $GITHUB_ENV
            # Current time will be used for both version and build date
            YEAR=$(date +%Y)
            MONTH=$(date +%m)
            DAY=$(date +%d)
            HOUR=$(date +%H)
            MINUTE=$(date +%M)

            # Format version: 1.YYYYMM.DDHHMM
            FF_VERSION="1.${YEAR}${MONTH}.${DAY}${HOUR}${MINUTE}"
            echo "FF_VERSION=$FF_VERSION" >> $GITHUB_ENV

            # Format build date
            BUILD_DATE="${YEAR}-${MONTH}-${DAY} ${HOUR}:${MINUTE} UTC"
            echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          fi

      # 6. Calculate Firefox version only if hash changed
      - name: Calculate extension version
        if: env.HASHES_MATCH != 'true'
        run: |
          # Version and build date are already set in the previous step
          mkdir -p docs/assets
          mkdir -p docs/assets/extension

      # 7. Create Firefox update manifest
      - name: Create Firefox update manifest
        run: |
          # Create or update updates.json using Bun
          bun -e "
            const fs = require('fs');
            const path = require('path');

            // If hashes match, we should keep the same version number
            // If hashes don't match, we use the new version number
            const data = {
              addons: {
                'feedfathom@smartrss': {
                  updates: [{
                    version: process.env.FF_VERSION,
                    update_link: \`\${process.env.PAGES_URL}/assets/extension/FeedFathom_ff.xpi\`,
                    update_hash: \`sha256:\${process.env.NEW_HASH}\`,
                    applications: {
                      gecko: {
                        strict_min_version: '120.0'
                      }
                    }
                  }]
                }
              }
            };

            const updatesPath = 'docs/assets/updates.json';
            const resolvedPath = path.resolve(updatesPath);
            console.log('Writing updates.json to:', resolvedPath);
            console.log('Using version:', process.env.FF_VERSION);
            console.log('Using hash:', process.env.NEW_HASH);
            fs.writeFileSync(updatesPath, JSON.stringify(data, null, 2));
          "

      # 8. Put files where they belong
      - name: Copy extension to Jekyll assets
        run: |
          mkdir -p docs/assets/extension
          cp ext/FeedFathom_ff.zip docs/assets/extension/FeedFathom_ff.xpi
          cp ext/FeedFathom_ch.zip docs/assets/extension/FeedFathom_ch.zip
          echo "Extension files copied to: $(realpath docs/assets/extension)"
          ls -la docs/assets/extension/
          echo "Updates.json location:"
          ls -la docs/assets/

      # 9. Update documentation
      - name: Update extension.md with template variables
        run: |
          # Replace template variables in extension.md
          sed -i "s|FIREFOX_VERSION|$FF_VERSION|g" docs/extension.md
          sed -i "s|FIREFOX_DOWNLOAD_URL|$PAGES_URL/assets/extension/FeedFathom_ff.xpi|g" docs/extension.md
          sed -i "s|CHROME_DOWNLOAD_URL|$PAGES_URL/assets/extension/FeedFathom_ch.zip|g" docs/extension.md

          # Use the build date that was set earlier
          sed -i "s|BUILD_DATE|$BUILD_DATE|g" docs/extension.md

          # Use the same version for Chrome as Firefox
          sed -i "s|CHROME_VERSION|$FF_VERSION|g" docs/extension.md

          echo "Documentation updated with version: $FF_VERSION"
          echo "Build date set to: $BUILD_DATE"

      # 10. Build the pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
