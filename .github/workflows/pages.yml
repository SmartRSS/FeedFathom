name: Deploy Docs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Pull the code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup environment
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      # 3. Update extension manifest for autoupdate
      - name: Set update URL in extension manifest
        run: |
          # Determine the GitHub Pages URL
          PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "PAGES_URL=$PAGES_URL" >> $GITHUB_ENV

          # Replace the template placeholder with the actual URL
          sed -i "s|%UPDATE_URL%|$PAGES_URL/assets/updates.json|g" src/extension/manifest.json

      # 4. Generate packages
      - name: Build extension
        run: bun build-extension

      # 5. Setup directories and load manifest
      - name: Setup and load manifest
        run: |
          # Create required directories once
          mkdir -p docs/assets/extension

          # Calculate hash of the new build
          NEW_HASH=$(sha256sum ext/FeedFathom_ff.zip | cut -d' ' -f1)
          echo "NEW_HASH=$NEW_HASH" >> $GITHUB_ENV

          # Load current manifest data
          MANIFEST_DATA=$(bun -e "
            const url = \`\${process.env.PAGES_URL}/assets/updates.json\`;
            const defaultData = { version: 'none', hash: 'none' };

            try {
              const response = await fetch(url);
              if (!response.ok) throw new Error('Failed to fetch');

              const data = await response.json();
              const update = data.addons['feedfathom@smartrss'].updates[0];

              console.log(JSON.stringify({
                version: update.version,
                hash: update.update_hash
              }));
            } catch (e) {
              console.log(JSON.stringify(defaultData));
            }
          ")

          # Parse JSON output into environment
          CURRENT_VERSION=$(echo "$MANIFEST_DATA" | jq -r '.version')
          CURRENT_HASH=$(echo "$MANIFEST_DATA" | jq -r '.hash')

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV

      # 6. Process version and build date
      - name: Process version and build date
        run: |
          format_datetime() {
            local year=$1
            local month=$2
            local day=$3
            local hour=$4
            local minute=$5

            echo "FF_VERSION=1.${year}${month}.${day}${hour}${minute}" >> $GITHUB_ENV
            echo "BUILD_DATE=${year}-${month}-${day} ${hour}:${minute} UTC" >> $GITHUB_ENV
          }

          if [ "sha256:$NEW_HASH" = "$CURRENT_HASH" ]; then
            # Extract datetime components from current version
            VERSION_PARTS=(${CURRENT_VERSION//./ })
            YEAR_MONTH=${VERSION_PARTS[1]}
            DAY_TIME=${VERSION_PARTS[2]}

            format_datetime "${YEAR_MONTH:0:4}" "${YEAR_MONTH:4:2}" \
                          "${DAY_TIME:0:2}" "${DAY_TIME:2:2}" "${DAY_TIME:4:2}"
            echo "Using existing version and build date"
          else
            # Use current datetime
            format_datetime "$(date +%Y)" "$(date +%m)" "$(date +%d)" "$(date +%H)" "$(date +%M)"
            echo "Using new version and build date"
          fi

      # 7. Copy extension files
      - name: Copy extension files
        run: |
          cp ext/FeedFathom_ff.zip docs/assets/extension/FeedFathom_ff.xpi
          cp ext/FeedFathom_ch.zip docs/assets/extension/FeedFathom_ch.zip

      # 8. Create Firefox update manifest
      - name: Create Firefox update manifest
        run: |
          bun -e "
            const fs = require('fs');

            const manifest = {
              addons: {
                'feedfathom@smartrss': {
                  updates: [{
                    version: process.env.FF_VERSION,
                    update_link: \`\${process.env.PAGES_URL}/assets/extension/FeedFathom_ff.xpi\`,
                    update_hash: \`sha256:\${process.env.NEW_HASH}\`,
                    applications: {
                      gecko: {
                        strict_min_version: '120.0'
                      }
                    }
                  }]
                }
              }
            };

            fs.writeFileSync('docs/assets/updates.json', JSON.stringify(manifest, null, 2));
            console.log(\`Published manifest with version \${process.env.FF_VERSION}\`);
          "

      # 9. Update documentation
      - name: Update documentation
        run: |
          # Update all placeholders in one go
          sed -i \
            -e "s|FIREFOX_VERSION|$FF_VERSION|g" \
            -e "s|CHROME_VERSION|$FF_VERSION|g" \
            -e "s|FIREFOX_DOWNLOAD_URL|$PAGES_URL/assets/extension/FeedFathom_ff.xpi|g" \
            -e "s|CHROME_DOWNLOAD_URL|$PAGES_URL/assets/extension/FeedFathom_ch.zip|g" \
            -e "s|BUILD_DATE|$BUILD_DATE|g" \
            docs/extension.md

          echo "Documentation updated with version $FF_VERSION (build: $BUILD_DATE)"

      # 10. Build the pages
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
