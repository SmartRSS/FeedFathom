name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Clean up Docker cache
        run: |
          docker builder prune -f
          docker system prune -f

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set repository name in lowercase
        id: prep
        run: |
          echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          # Sanitize branch name for docker tag
          BRANCH_TAG=$(echo ${{ github.ref_name }} | sed -e 's/[^a-zA-Z0-9.]/-/g')
          echo "BRANCH_TAG=$BRANCH_TAG" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.REPO_NAME }}
          tags: |
            latest
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        timeout-minutes: 30
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.REPO_NAME }}:buildcache
          cache-to: type=registry,ref=ghcr.io/${{ env.REPO_NAME }}:buildcache,mode=max
          tags: |
            ghcr.io/${{ env.REPO_NAME }}:latest
            ghcr.io/${{ env.REPO_NAME }}:${{ github.sha }}
            ghcr.io/${{ env.REPO_NAME }}:${{ env.BRANCH_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          build-args: |
            BUILDKIT_PROGRESS=plain
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760
            BUILDKIT_STEP_LOG_MAX_SPEED=10485760
            GITHUB_REPOSITORY=${{ github.repository }}

      - name: Log out from GitHub Container Registry
        run: docker logout ghcr.io

  verify:
    runs-on: ubuntu-24.04
    needs: build
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start services
        run: |
          docker compose pull
          docker compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          MAX_ATTEMPTS=150
          attempts=0
          until ! docker compose ps | grep -v "(healthy)" | grep -q "Up"; do
            attempts=$((attempts + 1))
            if [ $attempts -ge $MAX_ATTEMPTS ]; then
              echo "Timeout waiting for services to become healthy after 5 minutes" >&2
              echo "Current status:" >&2
              docker compose ps >&2
              exit 1
            fi
            echo "Waiting for all services to be healthy... (attempt $attempts/$MAX_ATTEMPTS)"
            sleep 2
          done
          echo "All services are now healthy"

      - name: Cleanup
        if: always()
        run: docker compose down -v

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    if: github.ref == 'refs/heads/main'
    env:
      DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      ALLOWED_EMAILS: ${{ vars.ALLOWED_EMAILS }}
      ENABLE_REGISTRATION: ${{ vars.ENABLE_REGISTRATION }}
      ORIGIN: ${{ vars.ORIGIN }}
      WORKER_CONCURRENCY: ${{ vars.WORKER_CONCURRENCY }}
      LOCK_DURATION: ${{ vars.LOCK_DURATION }}
      CLEANUP_INTERVAL: ${{ vars.CLEANUP_INTERVAL }}
      GATHER_JOBS_INTERVAL: ${{ vars.GATHER_JOBS_INTERVAL }}
      APP_REPLICAS: ${{ vars.APP_REPLICAS }}
      WORKER_REPLICAS: ${{ vars.WORKER_REPLICAS }}
      WORKER_MEM_LIMIT: ${{ vars.WORKER_MEM_LIMIT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
          sparse-checkout: |
            docker-compose.yml
            docker-compose-traefik.yml
            rollout.js

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy Docker Compose files and rollout script to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml docker-compose-traefik.yml rollout.js ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ env.DEPLOY_PATH }}/

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            cd ${{ env.DEPLOY_PATH }} && \
            export FEEDFATHOM_TAG=${{ github.sha }} && \
            export MAIL_REPLICAS=1 && \
            export FEED_FATHOM_DOMAIN='${{ secrets.FEED_FATHOM_DOMAIN }}' && \
            export ALLOWED_EMAILS='${{ env.ALLOWED_EMAILS }}' && \
            export ENABLE_REGISTRATION='${{ env.ENABLE_REGISTRATION }}' && \
            export ORIGIN='${{ env.ORIGIN }}' && \
            export WORKER_CONCURRENCY='${{ env.WORKER_CONCURRENCY }}' && \
            export LOCK_DURATION='${{ env.LOCK_DURATION }}' && \
            export CLEANUP_INTERVAL='${{ env.CLEANUP_INTERVAL }}' && \
            export GATHER_JOBS_INTERVAL='${{ env.GATHER_JOBS_INTERVAL }}' && \
            export WORKER_REPLICAS='${{ env.WORKER_REPLICAS }}' && \
            export WORKER_MEM_LIMIT='${{ env.WORKER_MEM_LIMIT }}' && \
            docker compose -f docker-compose.yml -f docker-compose-traefik.yml pull && \
            # Update services with proper dependency handling using rollout.js
            bun rollout.js -f docker-compose.yml -f docker-compose-traefik.yml \
              migrator server worker mail
          EOF
