services:
  redis:
    image: "redis"
    restart: always
    command: redis-server --appendonly yes
    healthcheck:
      test: "redis-cli ping | grep PONG || exit 1"
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_storage:/data
    networks:
      - feedfathom

  postgres:
    image: "postgres:17"
    restart: always
    command: [ "-c", "max_connections=1000" ]
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
    healthcheck:
      test: 'pg_isready --username=${POSTGRES_USER:-postgres} && psql --username=${POSTGRES_USER:-postgres} -c "SELECT * FROM postgres.pg_catalog.pg_database;"'
      interval: 1s
      timeout: 1s
      retries: 25
      start_period: 1s
    volumes:
      - postgres_storage_17:/var/lib/postgresql/data
    networks:
      - feedfathom

  migrator:
    init: true
    image: ghcr.io/smartrss/feedfathom:${FEEDFATHOM_TAG:-main}
    environment:
      INTEGRATION: "migrator"
    command: worker-entrypoint.js
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - feedfathom

  server:
    init: true
    image: ghcr.io/smartrss/feedfathom:${FEEDFATHOM_TAG:-main}
    restart: always
    command: index.js
    deploy:
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      replicas: ${APP_REPLICAS:-1}
    ports:
      - "3456:3000"
    environment:
      ALLOWED_EMAILS: ${ALLOWED_EMAILS:-}
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-false}
      MAIL_REPLICAS: ${MAIL_REPLICAS:-0}
    healthcheck:
      test: [ "CMD", "bun", "-e", "\"try { const res = await fetch('http://localhost:3000/healthcheck'); if (!res.ok) { throw new Error('Not OK'); } process.exit(0); }catch {process.exit(1);}\"" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    networks:
      - feedfathom

  worker:
    init: true
    image: ghcr.io/smartrss/feedfathom:${FEEDFATHOM_TAG:-main}
    command: worker-entrypoint.js
    restart: always
    environment:
      DEBUG: bull:*
      INTEGRATION: worker
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-25}
      LOCK_DURATION: ${LOCK_DURATION:-60}
      CLEANUP_INTERVAL: ${CLEANUP_INTERVAL:-20}
      GATHER_JOBS_INTERVAL: ${GATHER_JOBS_INTERVAL:-20}
    mem_limit: ${WORKER_MEM_LIMIT:-1000M}
    deploy:
      replicas: ${WORKER_REPLICAS:-10}
      update_config:
        parallelism: 2
        delay: 25s
        order: start-first
        failure_action: rollback
        monitor: 30s
    healthcheck:
      test: [ "CMD", "bun", "-e", "const Redis = require('ioredis'); const redis = new Redis('redis://redis:6379'); redis.ping().then(() => process.exit(0)).catch(() => process.exit(1))" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    networks:
      - feedfathom

  mail:
    init: true
    image: ghcr.io/smartrss/feedfathom:${FEEDFATHOM_TAG:-main}
    command: worker-entrypoint.js
    ports:
      - "25:25"
    restart: always
    environment:
      DEBUG: bull:*
      INTEGRATION: "mail"
    deploy:
      mode: global
      replicas: ${MAIL_REPLICAS:-0}
    healthcheck:
      test: [ "CMD", "bun", "-e", "const net = require('net'); const client = new net.Socket(); client.connect(25, 'localhost', () => { client.end(); process.exit(0); }); client.on('error', () => process.exit(1));" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - feedfathom

volumes:
  redis_storage:
    driver: local
  postgres_storage_17:
    driver: local

networks:
  feedfathom:
    driver: bridge
